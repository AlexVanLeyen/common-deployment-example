name: Build and Deploy Image

on: 
  workflow_dispatch:
    inputs:
      region:
        description: AWS Region
        required: true
        default: ca-central-1
      account-id:
        description: AWS Account ID
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Branch Name
        id: fetch-branch-name
        shell: bash
        run: echo "::set-output name=branch-name::$(echo ${GITHUB_REF#refs/heads/})"
        
      - name: Configured AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - run: ls /
      - run: echo $HOME
      - name: Build, tag, and push images to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.fetch-branch-name.outputs.branch-name }}-${{ github.event.inputs.account-id }}-apache-container-repository
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg TOKEN=${{ secrets.TOKEN }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Render Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ steps.fetch-branch-name.outputs.branch-name }}-${{ github.event.inputs.account-id }}-apache-container-repository
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy to Amazon ECS service
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ steps.fetch-branch-name.outputs.branch-name }}-${{ github.event.inputs.account-id }}-ecs-service
      #     cluster: ${{ steps.fetch-branch-name.outputs.branch-name }}-${{ github.event.inputs.account-id }}-cluster
      #     wait-for-service-stability: true